Docker-in-Docker Container Command:
docker run --name dind -d \
--network jenkins --network-alias docker \
--privileged \
-u root \
-e DOCKER_TLS_CERTDIR=/certs \
-v docker-certs-ca:/certs/ca \
-v docker-certs-client:/certs/client \
-v jenkins-data:/var/jenkins_home \
docker:dind

EXPLANATION:
1. docker run --name dind -d
    docker run: This is the command to create and start a new container based on a specified image.
    --name dind: This assigns a name (dind) to the running container, making it easier to reference later.
    -d: This flag runs the container in "detached" mode, meaning it runs in the background.
2. --network jenkins
    --network jenkins: This option connects the container to a Docker network named jenkins. It allows communication between containers on the same network.
3. --network-alias docker
    --network-alias docker: This assigns an alias (docker) to the container on the specified network (jenkins). Other containers can reference this container using this alias.
4. --privileged
    --privileged: This flag grants the container elevated privileges, giving it more access to the host system. This is necessary when running Docker-in-Docker (dind), as the container will need to start other containers.
5. -u root
    -u root: This specifies the user (root) that the container should run as. In this case, itâ€™s running as the root user inside the container, which is typical for containers running Docker itself.
6. -e DOCKER_TLS_CERTDIR=/certs
    -e DOCKER_TLS_CERTDIR=/certs: This sets an environment variable inside the container, DOCKER_TLS_CERTDIR, which tells Docker where to look for TLS certificates (in the /certs directory). This is used for secure communication with the Docker daemon.
7. -v docker-certs-ca:/certs/ca
    -v docker-certs-ca:/certs/ca: This mounts a named Docker volume (docker-certs-ca) to the container's /certs/ca directory. It is typically used to store the Certificate Authority (CA) files required for secure Docker communication.
8. -v docker-certs-client:/certs/client
    -v docker-certs-client:/certs/client: This mounts another named Docker volume (docker-certs-client) to the container's /certs/client directory, where the client TLS certificates for Docker would be stored.
9. -v jenkins-data:/var/jenkins_home
    -v jenkins-data:/var/jenkins_home: This mounts a named volume (jenkins-data) to the /var/jenkins_home directory inside the container. This is the default Jenkins home directory where all Jenkins data is stored.
10. docker:dind
    docker:dind: This is the image used to create the container. docker:dind stands for Docker-in-Docker, a Docker image specifically designed to allow Docker to run inside a Docker container. It includes all the necessary tools and configurations to enable running Docker commands within the container itself.

Therefore, this command sets up a Docker-in-Docker (dind) container connected to a Jenkins network with privileged access, mounting the necessary volumes for Docker TLS certificates and Jenkins data.

Jenkin Container Command:
docker container run --name jenkins \
--detach --restart unless-stopped \
--network jenkins \
-u root \
--env DOCKER_HOST="tcp://docker:2376" \
--env DOCKER_CERT_PATH=/certs/client \
--env DOCKER_TLS_VERIFY=1 \
--volume docker-certs-client:/certs/client:ro \
--volume jenkins-data:/var/jenkins_home \
--publish 8080:8080 --publish 50000:50000 \
-v /usr/bin/docker:/usr/bin/docker \
jenkins/jenkins:lts-jdk11

EXPLANATION:
1. docker container run --name jenkins
    docker container run: This command creates and starts a new Docker container based on the specified image.
    --name jenkins: Assigns the name jenkins to the running container, which allows for easy reference later.
2. --detach
    --detach: Runs the container in the background (detached mode) instead of in the foreground, so the command prompt is freed after the container starts.
3. --restart unless-stopped
    --restart unless-stopped: Automatically restarts the container if it stops due to failure, but will not restart it if it was manually stopped. This ensures the Jenkins container stays running even after system reboots or crashes.
4. --network jenkins
    --network jenkins: Connects the Jenkins container to a Docker network named jenkins, allowing communication between containers on the same network.
5. -u root
    -u root: Specifies that the container should run as the root user inside the container. Jenkins needs root permissions to manage files and execute commands within the container.
6. --env DOCKER_HOST="tcp://docker:2376"
    --env DOCKER_HOST="tcp://docker:2376": Sets the DOCKER_HOST environment variable inside the container, pointing Jenkins to communicate with the Docker daemon running on the docker container (from the previous dind setup) over TCP on port 2376. This is essential for Jenkins to use Docker inside the pipeline jobs.
7. --env DOCKER_CERT_PATH=/certs/client
    --env DOCKER_CERT_PATH=/certs/client: Sets the DOCKER_CERT_PATH environment variable to /certs/client, specifying where the Docker client certificates are located inside the container for secure TLS communication with the Docker daemon.
8. --env DOCKER_TLS_VERIFY=1
    --env DOCKER_TLS_VERIFY=1: This environment variable enables TLS verification for secure communication between Jenkins and the Docker daemon.
9. --volume docker-certs-client:/certs/client:ro
    --volume docker-certs-client:/certs/client:ro: Mounts the Docker volume docker-certs-client to /certs/client inside the container, making the client certificates available for secure communication. The :ro flag makes this volume read-only, preventing the container from modifying the certificate files.
10. --volume jenkins-data:/var/jenkins_home
    --volume jenkins-data:/var/jenkins_home: Mounts the Docker volume jenkins-data to the container's /var/jenkins_home directory, which is Jenkins' default home directory where all the Jenkins configurations, plugins, jobs, and logs are stored. This ensures data persists even if the container is recreated.
11. --publish 8080:8080
    --publish 8080:8080: Maps port 8080 on the host machine to port 8080 inside the container. Jenkins listens on port 8080 by default for its web interface, allowing access to Jenkins from the host's browser via http://localhost:8080.
12. --publish 50000:50000
    --publish 50000:50000: Maps port 50000 on the host to port 50000 in the container. This port is used by Jenkins for communication with its build agents (slave nodes) over JNLP (Java Network Launch Protocol).
13. -v /usr/bin/docker:/usr/bin/docker
    -v /usr/bin/docker:/usr/bin/docker: Binds the host's Docker executable (/usr/bin/docker) to the same location inside the container. This allows Jenkins to directly use the host's Docker binary to manage Docker containers and images. This is necessary because Jenkins needs access to the Docker CLI to execute Docker commands in the pipeline.
14. jenkins/jenkins:lts-jdk11
    jenkins/jenkins:lts-jdk11: This specifies the image to use for creating the Jenkins container. The image is jenkins/jenkins with the lts-jdk11 tag, which refers to the Long-Term Support (LTS) version of Jenkins bundled with JDK 11.

Therefore, this command runs a Jenkins container in detached mode on a custom Docker network (jenkins). It enables Jenkins to securely communicate with a Docker daemon using TLS, maps necessary volumes for data persistence and client certificates, and publishes required ports for the web interface and agent communication. The container runs as root and can use Docker directly via the mounted Docker binary.
